<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT
moveX=0;
moveY=0;
grav=0.6;
speed_normal=3;
speed_run=5;
count_jump=0;
//APPLYING
my_speed=speed_normal
state="idle"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATE CONTROLLER
//INPUT
inputW=keyboard_check_pressed(ord("W"));
inputA=keyboard_check(ord("A"));
inputD=keyboard_check(ord("D"));
inputShift=keyboard_check(vk_shift);
inputSpace=keyboard_check_pressed(vk_space);
//PHYSIC
if moveY &lt; 10
{
moveY=min(moveY+grav,9);
}
//STATE CHANGING
if (state=="idle"){
sprite_index=s_player_idle;
image_speed=1/3;
if (inputW){
moveY=-10;
state="jump"
}
if (inputA or inputD){
state="move"
}
if (inputSpace){
state="attack"
}
}
else if (state=="jump"){
sprite_index=s_player_jump;
image_speed=0;
image_index=0
if (place_meeting(x,y+moveY,o_ground)){
while (not place_meeting(x,y+sign(moveY),o_ground)){
y+=sign(moveY)
}
state="idle"
}
if (inputD){
moveX=my_speed-1;
}
if(inputA){
moveX=-(my_speed-1);
}
}
else if (state=="move"){
sprite_index=s_player_run;
if (inputShift){
my_speed=speed_run;
}
else {
my_speed=speed_normal
}
moveX=(inputD-inputA)*my_speed;
if (inputA+inputD==0){
state="idle";
}
if (inputW){
moveY=-10
state="jump"
}
}
else if (state=="attack"){
sprite_index=s_player_attack;
if (image_index&gt;=image_number){
instance_create (x-4,y-20,o_rock)
state="idle"
}
}
///COLLISION CHECKING
if (place_meeting(x,y+moveY,o_ground)){
while(not place_meeting(x,y+sign(moveY),o_ground)){
y+=sign(moveY);
}
moveY=0
}
if (place_meeting(x+moveX,y,o_ground)){
while(not place_meeting(x+sign(moveX),y,o_ground)){
x+=sign(moveX)
}
moveX=0
}
//APPLY MOVEMENT
x+=moveX;
y+=moveY



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///IMAGE CONTROLLER
if (moveX&lt;0){
image_xscale=-1;
}
if (moveX&gt;0){
image_xscale=1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
